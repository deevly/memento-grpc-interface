// @generated by protobuf-ts 2.7.0 with parameter long_type_number,generate_dependencies
// @generated from protobuf file "memento/keyword.proto" (package "memento", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { KeywordResult } from "./types";
import { KeywordCursor } from "./types";
/**
 * @generated from protobuf message memento.ListKeywordsRequest
 */
export interface ListKeywordsRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: memento.KeywordCursor cursor = 2;
     */
    cursor?: KeywordCursor;
}
/**
 * @generated from protobuf message memento.ListKeywordsResponse
 */
export interface ListKeywordsResponse {
    /**
     * @generated from protobuf field: repeated memento.KeywordResult keywords = 1;
     */
    keywords: KeywordResult[];
}
/**
 * @generated from protobuf message memento.SearchKeywordsRequest
 */
export interface SearchKeywordsRequest {
    /**
     * @generated from protobuf field: string regex = 1;
     */
    regex: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
}
/**
 * @generated from protobuf message memento.SearchKeywordsResponse
 */
export interface SearchKeywordsResponse {
    /**
     * @generated from protobuf field: repeated memento.KeywordResult keywords = 1;
     */
    keywords: KeywordResult[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ListKeywordsRequest$Type extends MessageType<ListKeywordsRequest> {
    constructor() {
        super("memento.ListKeywordsRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cursor", kind: "message", T: () => KeywordCursor }
        ]);
    }
    create(value?: PartialMessage<ListKeywordsRequest>): ListKeywordsRequest {
        const message = { username: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListKeywordsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListKeywordsRequest): ListKeywordsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* memento.KeywordCursor cursor */ 2:
                    message.cursor = KeywordCursor.internalBinaryRead(reader, reader.uint32(), options, message.cursor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListKeywordsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* memento.KeywordCursor cursor = 2; */
        if (message.cursor)
            KeywordCursor.internalBinaryWrite(message.cursor, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message memento.ListKeywordsRequest
 */
export const ListKeywordsRequest = new ListKeywordsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListKeywordsResponse$Type extends MessageType<ListKeywordsResponse> {
    constructor() {
        super("memento.ListKeywordsResponse", [
            { no: 1, name: "keywords", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KeywordResult }
        ]);
    }
    create(value?: PartialMessage<ListKeywordsResponse>): ListKeywordsResponse {
        const message = { keywords: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListKeywordsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListKeywordsResponse): ListKeywordsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated memento.KeywordResult keywords */ 1:
                    message.keywords.push(KeywordResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListKeywordsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated memento.KeywordResult keywords = 1; */
        for (let i = 0; i < message.keywords.length; i++)
            KeywordResult.internalBinaryWrite(message.keywords[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message memento.ListKeywordsResponse
 */
export const ListKeywordsResponse = new ListKeywordsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchKeywordsRequest$Type extends MessageType<SearchKeywordsRequest> {
    constructor() {
        super("memento.SearchKeywordsRequest", [
            { no: 1, name: "regex", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SearchKeywordsRequest>): SearchKeywordsRequest {
        const message = { regex: "", username: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SearchKeywordsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchKeywordsRequest): SearchKeywordsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string regex */ 1:
                    message.regex = reader.string();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchKeywordsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string regex = 1; */
        if (message.regex !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.regex);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message memento.SearchKeywordsRequest
 */
export const SearchKeywordsRequest = new SearchKeywordsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchKeywordsResponse$Type extends MessageType<SearchKeywordsResponse> {
    constructor() {
        super("memento.SearchKeywordsResponse", [
            { no: 1, name: "keywords", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KeywordResult }
        ]);
    }
    create(value?: PartialMessage<SearchKeywordsResponse>): SearchKeywordsResponse {
        const message = { keywords: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SearchKeywordsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchKeywordsResponse): SearchKeywordsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated memento.KeywordResult keywords */ 1:
                    message.keywords.push(KeywordResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchKeywordsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated memento.KeywordResult keywords = 1; */
        for (let i = 0; i < message.keywords.length; i++)
            KeywordResult.internalBinaryWrite(message.keywords[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message memento.SearchKeywordsResponse
 */
export const SearchKeywordsResponse = new SearchKeywordsResponse$Type();
/**
 * @generated ServiceType for protobuf service memento.KeywordService
 */
export const KeywordService = new ServiceType("memento.KeywordService", [
    { name: "ListKeywords", options: {}, I: ListKeywordsRequest, O: ListKeywordsResponse },
    { name: "SearchKeywords", options: {}, I: SearchKeywordsRequest, O: SearchKeywordsResponse }
]);
