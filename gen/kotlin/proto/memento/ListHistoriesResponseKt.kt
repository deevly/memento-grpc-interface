//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: memento/history.proto

package memento;

@kotlin.jvm.JvmName("-initializelistHistoriesResponse")
public inline fun listHistoriesResponse(block: memento.ListHistoriesResponseKt.Dsl.() -> kotlin.Unit): memento.History.ListHistoriesResponse =
  memento.ListHistoriesResponseKt.Dsl._create(memento.History.ListHistoriesResponse.newBuilder()).apply { block() }._build()
public object ListHistoriesResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: memento.History.ListHistoriesResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: memento.History.ListHistoriesResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): memento.History.ListHistoriesResponse = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class UrlsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .memento.Url urls = 1 [json_name = "urls"];</code>
     */
     public val urls: com.google.protobuf.kotlin.DslList<memento.Types.Url, UrlsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getUrlsList()
      )
    /**
     * <code>repeated .memento.Url urls = 1 [json_name = "urls"];</code>
     * @param value The urls to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addUrls")
    public fun com.google.protobuf.kotlin.DslList<memento.Types.Url, UrlsProxy>.add(value: memento.Types.Url) {
      _builder.addUrls(value)
    }
    /**
     * <code>repeated .memento.Url urls = 1 [json_name = "urls"];</code>
     * @param value The urls to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignUrls")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<memento.Types.Url, UrlsProxy>.plusAssign(value: memento.Types.Url) {
      add(value)
    }
    /**
     * <code>repeated .memento.Url urls = 1 [json_name = "urls"];</code>
     * @param values The urls to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllUrls")
    public fun com.google.protobuf.kotlin.DslList<memento.Types.Url, UrlsProxy>.addAll(values: kotlin.collections.Iterable<memento.Types.Url>) {
      _builder.addAllUrls(values)
    }
    /**
     * <code>repeated .memento.Url urls = 1 [json_name = "urls"];</code>
     * @param values The urls to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllUrls")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<memento.Types.Url, UrlsProxy>.plusAssign(values: kotlin.collections.Iterable<memento.Types.Url>) {
      addAll(values)
    }
    /**
     * <code>repeated .memento.Url urls = 1 [json_name = "urls"];</code>
     * @param index The index to set the value at.
     * @param value The urls to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setUrls")
    public operator fun com.google.protobuf.kotlin.DslList<memento.Types.Url, UrlsProxy>.set(index: kotlin.Int, value: memento.Types.Url) {
      _builder.setUrls(index, value)
    }
    /**
     * <code>repeated .memento.Url urls = 1 [json_name = "urls"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearUrls")
    public fun com.google.protobuf.kotlin.DslList<memento.Types.Url, UrlsProxy>.clear() {
      _builder.clearUrls()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun memento.History.ListHistoriesResponse.copy(block: memento.ListHistoriesResponseKt.Dsl.() -> kotlin.Unit): memento.History.ListHistoriesResponse =
  memento.ListHistoriesResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

